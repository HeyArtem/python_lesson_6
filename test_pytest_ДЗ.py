# Я создал этот модуль, т.к. думаю, что мой автоматический pytest тест не работатет т.к. нет слова test в названии страницы
print('   Я создал этот модуль, т.к. думаю, что мой автоматический pytest тест не работатет\n т.к. нет слова test в названии страницы')

# ДЗ после главы 6 тестирование
print('   ДЗ после главы 6 тестирование')

# Тестирование буду проводить на функции, которая проверяет число на простоту
print('   Тестирование буду проводить на функции, которая проверяет число на простоту')



def number_1_1000(n):
    '''

    Функция проверяет полученное число, что бы
    оно нахлдилось в промежутке между 1 и 1000
    :param n: получает число для проверки
    :return: Возвращает вводимое число если оно в промежутке
             м/у 1 и 100 и выдаст None, если число вне заданного промежутка

    '''
    if n in (i for i in range(1, 1001)):
        return (n)
    else:
        return None


# print(number_1_1000(1.5))

# Проверка числа на простоту (простые числа - это те числа у которых делители единица и они сами)
print('   Проверка числа на простоту (простые числа - это те числа\n    у которых делители единица и они сами)')


def isPrime(n):
    '''

    Функция получает число, сначала проверяет его через функцию
    def number_1_1000(n), и убедившись, что оно находится в промежутке м/у
    1 и 1000., проверяет, является ли оно простым (простое, делится только
    на 1 и самого себя)

    :param n: получает число, которое нужно проверить на простототу
    :return: 'Простое число' -> если число простое
              'Составное число' -> если число не простое
              'Data error' -> если число не находиться в промежутке м/у 1 и 1000

    '''
    if number_1_1000(n):
        lst = []
        for i in range(2, n + 1):
            for j in lst:
                if i % j == 0:
                    break
            else:
                lst.append(i)
        if n in lst:
            return ('Простое число')
        else:
            return ('Составное число')
    else:
        return 'Data error'

#print(isPrime(20))

print()
#  Полуавтоматичесское тестирование
print('  Полуавтоматичесское тестирование')
print('Полуавтоматичесский Тест 1')

def function_test():
    n=20 # На выходе должны получить 'Составное число'
    resault_out = isPrime(n)
    if resault_out == 'Составное число':
        print('Test 1 is OK')
    else:
        print('Test 1 is failed!')
function_test()

print()
# Полуавтоматичесский Тест 2
print('Полуавтоматичесский Тест 2')

def function_test():
    n=12000 # На выходе должны получить 'Data error'
    resault_out = isPrime(n)
    if resault_out == 'Data error':
        print('Test 2 is OK')
    else:
        print('Test 2 is failed!')
function_test()

print()
# Автоматичесское тестирование с помощью библиотеки pytest Тест 3
print('Автоматичесское тестирование с помощью библиотеки pytest Тест 3')

def test_isPrime():  # !!! pytest ругается на этот тест!!!
    n = 20
    assert test_isPrime(n) == ('Составное число')


print()
# Автоматич тестир-е Тест 4, сделаю на функции 'number_1_1000(n)', т.к. первый автома-ий тест не сработал
print('   Автоматич тестир-е Тест 4, сделаю на функции number_1_1000(n), \nт.к. первый автома-ий тест не сработал')

def test_number_1_1000():
    n=1500
    assert number_1_1000(n) == None


print()
# Автоматич тестир-е Тест 5,  тоже сделаю на функции 'number_1_1000(n)', почему то не
# получается сделать тест на test_isPrime(n) !!!!  Почему?????
print('   Автоматич тестир-е Тест 5,  тоже сделаю на функции number_1_1000(n), почему\n'
      'то неполучается сделать тест на test_isPrime(n) !!!!  Почему?????')


def test_number_1_1000():
    n=500
    assert number_1_1000(n) == (400) # на выходе фу-ции должно быть 500, но я спец-но пишу 400



print()
# Придумайте 2 теста к грязной функции. Примером грязной функции является функция F из задания 4;
print('   Придумайте 2 теста к грязной функции. Примером грязной функции является функция F из задания 4')

# Функция из 4 задания

sps_list = (['Зина', 'Артур', 'Илья', 'Семен', 'Просковья', 'Маргарита', 'Альберт', 'Просковья', 'Фрэнк', 'Артем',
             'Дмитрий', 'София', 'Ева', 'Ромео', 'Джульетта', 'Фокс', 'Карбофос', 'Фунтик', 'Том', 'Джери'])

rnd_list = []
import random
def f(name_list, z):

    ''''

    Функция получает на вход список из 20 имен
    и создает из него рэндомный список имен длиной z

    :param:  name_list - список из имен
             Z - длина будущего списка
    :return: rnd_list - рэндомный список длиной z

    '''

    rnd_list = random.choices(name_list, k=z)  # создали рэндомный список длиной k

    return rnd_list

print(f(sps_list, z=100))

# Как протестировать эту функцию, она выдает постоянно разный список из 100 имен?
# Если только проверить  длину списка?

def test_f():

    assert f(sps_list, z=100) == (int(len(100))) # на выходе фу-ции должно быть 500, но я спец-но пишу 400
